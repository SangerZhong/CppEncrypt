#include <Windows.h>
#include <iostream>
#include <vector>
#include <Wincrypt.h>

#pragma comment(lib, "Crypt32.lib")

bool EncryptData(const BYTE *key, const BYTE *data, DWORD data_size, std::vector<BYTE> &encrypted_data, std::vector<BYTE> &iv);

bool DecryptData(const BYTE *key, const BYTE *data, DWORD data_size, const BYTE *iv, std::vector<BYTE> &decrypted_data);

int main() {
    // 对称密钥
    const BYTE secret_key[32] = { /* Your 32-byte secret key here. */ };

    // 原始数据
    const char *data = "Your plain text data here.";

    std::vector<BYTE> encrypted_data;
    std::vector<BYTE> iv(16);
    std::vector<BYTE> decrypted_data;

    // 加密数据
    if (EncryptData(secret_key, reinterpret_cast<const BYTE *>(data), strlen(data) + 1, encrypted_data, iv)) {
        std::cout << "Encrypted data: ";
        for (size_t i = 0; i < encrypted_data.size(); i++) {
            printf("%02X", encrypted_data[i]);
        }
        std::cout << std::endl;

        std::cout << "IV: ";
        for (size_t i = 0; i < 16; i++) {
            printf("%02X", iv[i]);
        }
        std::cout << std::endl;
    } else {
        std::cerr << "Encryption failed." << std::endl;
        return 1;
    }

    // 解密数据
    if (DecryptData(secret_key, encrypted_data.data(), encrypted_data.size(), iv.data(), decrypted_data)) {
        std::cout << "Decrypted data: ";
        for (size_t i = 0; i < decrypted_data.size(); i++) {
            printf("%c", decrypted_data[i]);
        }
        std::cout << std::endl;
    } else {
        std::cerr << "Decryption failed." << std::endl;
        return 1;
    }

    return 0;
}

bool EncryptData(const BYTE *key, const BYTE *data, DWORD data_size, std::vector<BYTE> &encrypted_data, std::vector<BYTE> &iv) {
    HCRYPTPROV hCryptProv = NULL;
    HCRYPTKEY hKey = NULL;
    HCRYPTKEY hXchgKey = NULL;
    HCRYPTHASH hHash = NULL;

    if (!CryptAcquireContext(&hCryptProv, NULL, MS_ENH_RSA_AES_PROV, PROV_RSA_AES, CRYPT_VERIFYCONTEXT)) {
        std::cerr << "Error: CryptAcquireContext" << std::endl;
        return false;
    }

    struct {
        BLOBHEADER header;
        DWORD key_length;
        BYTE key[32];
    } AES256KeyBlob = {
            {PLAINTEXTKEYBLOB, CUR_BLOB_VERSION, 0, CALG_AES_256},
            32,
            {0}
    };
    memcpy(AES256KeyBlob.key, key, 32);

    if (!CryptImportKey(hCryptProv, reinterpret_cast<BYTE *>(&AES256KeyBlob), sizeof(AES256KeyBlob), 0, 0, &hKey)) {
        std::cerr << "Error: CryptImportKey" << std::endl;
        CryptReleaseContext(hCryptProv, 0);
        return false;
    }

    if (!CryptGenRandom(hCryptProv, 16, iv.data())) {
        std::cerr << "Error: CryptGenRandom" << std::endl;
        CryptDestroyKey(hKey);
        CryptReleaseContext(hCryptProv, 0);
        return false;
    }

    if (!CryptSetKeyParam(hKey, KP_IV, iv.data(), 0)) {
        std::cerr << "Error: CryptSetKeyParam" << std::endl;
        CryptDestroyKey(hKey);
        CryptReleaseContext(hCryptProv, 0);
        return false;
    }

    DWORD padded_data_size = ((data_size + 15) >> 4) << 4;
    encrypted_data.resize(static_cast<size_t>(padded_data_size));
    memcpy(encrypted_data.data(), data, data_size);

    if (!CryptEncrypt(hKey, 0, TRUE, 0, encrypted_data.data(), &data_size, padded_data_size)) {
        std::cerr << "Error: CryptEncrypt" << std::endl;
        CryptDestroyKey(hKey);
        CryptReleaseContext(hCryptProv, 0);
        return false;
    }

    CryptDestroyHash(hHash);
    CryptDestroyKey(hKey);
    CryptDestroyKey(hXchgKey);
    CryptReleaseContext(hCryptProv, 0);

    return true;
}
    
bool DecryptData(const BYTE *key, const BYTE *data, DWORD data_size, const BYTE *iv, std::vector<BYTE> &decrypted_data) {
    HCRYPTPROV hCryptProv = NULL;
    HCRYPTKEY hKey = NULL;
    HCRYPTKEY hXchgKey = NULL;
    HCRYPTHASH hHash = NULL;

    if (!CryptAcquireContext(&hCryptProv, NULL, MS_ENH_RSA_AES_PROV, PROV_RSA_AES, CRYPT_VERIFYCONTEXT)) {
        std::cerr << "Error: CryptAcquireContext" << std::endl;
        return false;
    }

    struct {
        BLOBHEADER header;
        DWORD key_length;
        BYTE key[32];
    } AES256KeyBlob = {
            {PLAINTEXTKEYBLOB, CUR_BLOB_VERSION, 0, CALG_AES_256},
            32,
            {0}
    };
    memcpy(AES256KeyBlob.key, key, 32);

    if (!CryptImportKey(hCryptProv, reinterpret_cast<BYTE *>(&AES256KeyBlob), sizeof(AES256KeyBlob), 0, 0, &hKey)) {
        std::cerr << "Error: CryptImportKey" << std::endl;
        CryptReleaseContext(hCryptProv, 0);
        return false;
    }

    if (!CryptSetKeyParam(hKey, KP_IV, iv, 0)) {
        std::cerr << "Error: CryptSetKeyParam" << std::endl;
        CryptDestroyKey(hKey);
        CryptReleaseContext(hCryptProv, 0);
        return false;
    }

    decrypted_data.resize(static_cast<size_t>(data_size));
    memcpy(decrypted_data.data(), data, data_size);

    if (!CryptDecrypt(hKey, 0, TRUE, 0, decrypted_data.data(), &data_size)) {
        std::cerr << "Error: CryptDecrypt" << std::endl;
        CryptDestroyKey(hKey);
        CryptReleaseContext(hCryptProv, 0);
        return false;
    }

    if (data_size > 0 && decrypted_data[data_size - 1] <= 16) {
        BYTE padding_size = decrypted_data[data_size - 1];
        bool valid_padding = true;
        for (int i = 1; i <= padding_size; i++) {
            if (decrypted_data[data_size - i] != padding_size) {
                valid_padding = false;
                break;
            }
        }
        if (valid_padding) {
            data_size -= padding_size;
        }
    }

    decrypted_data.resize(static_cast<size_t>(data_size));

    CryptDestroyHash(hHash);
    CryptDestroyKey(hKey);
    CryptDestroyKey(hXchgKey);
    CryptReleaseContext(hCryptProv, 0);

    return true;
}
