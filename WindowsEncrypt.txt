 #include <Windows.h>
#include <wincrypt.h>
#include <iostream>
#include <fstream>
#include <vector>
#include <cstdio>

#define BUFFER_SIZE 4096

BOOL CreateAes(CryptoPP::AutoSeededRandomPool& rnd, BYTE* key, BYTE* iv, const DWORD& key_size);
BOOL Encrypt(AESCONTEXT* pAesContext, BYTE* data, DWORD& length);
BOOL EncryptAes(AESCONTEXT* pAesContext, BYTE* data, DWORD length, BYTE*& output, DWORD& output_length);
void CloseAes(AESCONTEXT* pAesContext);

BOOL CreateCompressor(HCOMPRESSOR& hCompressor);
BOOL Compress(HCOMPRESSOR& hCompressor, BYTE* data, DWORD& length);
void CloseCompressor(HCOMPRESSOR hCompressor);

int main()
{
    // 打开输入文件
    std::ifstream fin("inputfile", std::ios::binary | std::ios::in);
    if (!fin.is_open())
    {
        std::cerr << "Failed to open input file." << std::endl;
        return -1;
    }

    // 创建AES加密上下文
    BYTE key[32] = { 0 };
    BYTE iv[16] = { 0 };
    CryptoPP::AutoSeededRandomPool rnd;
    if (!CreateAes(rnd, key, iv, 256))
    {
        std::cerr << "Failed to create AES context." << std::endl;
        return -1;
    }

    AESCONTEXT* pAesContext = nullptr;
    if (!CreateAesContext(key, 256, iv, pAesContext))
    {
        std::cerr << "Failed to create AES context." << std::endl;
        CloseAes(pAesContext);
        return -1;
    }

    // 创建压缩上下文
    HCOMPRESSOR hCompressor = nullptr;
    if (!CreateCompressor(hCompressor))
    {
        std::cerr << "Failed to create compressor context." << std::endl;
        CloseCompressor(hCompressor);
        CloseAes(pAesContext);
        return -1;
    }

    // 打开输出文件
    std::ofstream fout("outputfile", std::ios::binary | std::ios::out);
    if (!fout.is_open())
    {
        std::cerr << "Failed to open output file." << std::endl;
        CloseCompressor(hCompressor);
        CloseAes(pAesContext);
        return -1;
    }

    // 对数据进行压缩和加密，并直接写入到输出文件中
    BYTE buffer[BUFFER_SIZE];
    DWORD read_bytes, write_bytes;
    while (fin.read(reinterpret_cast<char*>(buffer), BUFFER_SIZE))
    {
        read_bytes = static_cast<DWORD>(fin.gcount());
        if (!Compress(hCompressor, buffer, read_bytes) || !Encrypt(pAesContext, buffer, read_bytes))
        {
            std::cerr << "Failed to Compress and/or Encrypt the data." << std::endl;
            CloseCompressor(hCompressor);
            CloseAes(pAesContext);
            return -1;
        }

        fout.write(reinterpret_cast<char*>(buffer), read_bytes);
        write_bytes += read_bytes;
    }

    // 对最后剩余的数据进行压缩和加密，并写入到输出文件中
    if (fin.eof())
    {
        read_bytes = static_cast<DWORD>(fin.gcount());
        if (!Compress(hCompressor, buffer, read_bytes) || !Encrypt(pAesContext, buffer, read_bytes))
        {
            std::cerr << "Failed to Compress and/or Encrypt the data." << std::endl;
            CloseCompressor(hCompressor);
            CloseAes(pAesContext);
            return -1;
        }

        fout.write(reinterpret_cast<char*>(buffer), read_bytes);
        write_bytes += read_bytes;
    }

    // 关闭资源
    fin.close();
    fout.close();
    CloseCompressor(hCompressor);
    CloseAes(pAesContext);

    return 0;
}

BOOL CreateAes(CryptoPP::AutoSeededRandomPool& rnd, BYTE* key, BYTE* iv, const DWORD& key_size)
{
    rnd.GenerateBlock(key, key_size / 8);
    rnd.GenerateBlock(iv, 16);
    return TRUE;
}

BOOL EncryptAes(AESCONTEXT* pAesContext, BYTE* data, DWORD length, BYTE*& output, DWORD& output_length)
{
    DWORD padded_length = pAesContext->block_length * ((length + pAesContext->block_length - 1) / pAesContext->block_length);
    output = static_cast<BYTE*>(LocalAlloc(LPTR, padded_length));
    if (!output)
    {
        std::cerr << "Failed to allocate memory for encrypted data." << std::endl;
        return FALSE;
    }

    if (!CryptEncrypt(pAesContext->hKey, 0, TRUE, 0, output, &length, padded_length))
    {
        LocalFree(output);
        std::cerr << "Failed to encrypt data using AES algorithm." << std::endl;
        return FALSE;
    }

    output_length = length;
    return TRUE;
}

BOOL Encrypt(AESCONTEXT* pAesContext, BYTE* data, DWORD& length)
{
    BYTE* new_data = nullptr;
    DWORD new_length = 0;
    if (!EncryptAes(pAesContext, data, length, new_data, new_length))
    {
        LocalFree(new_data);
        std::cerr << "Failed to encrypt data using AES algorithm." << std::endl;
        return FALSE;
    }

    memcpy_s(data, length, new_data, new_length);
    length = new_length;

    LocalFree(new_data);
    return TRUE;
}

void CloseAes(AESCONTEXT* pAesContext)
{
    if (pAesContext != nullptr)
    {
        CryptDestroyKey(pAesContext->hKey);
        CryptReleaseContext(pAesContext->hCryptProv, 0);
        delete pAesContext;
    }
}

BOOL CreateCompressor(HCOMPRESSOR& hCompressor)
{
    hCompressor = CreateCompressor(COMPRESS_ALGORITHM_LZMS, nullptr, nullptr);
    return (hCompressor != nullptr);
}

BOOL Compress(HCOMPRESSOR& hCompressor, BYTE* data, DWORD& length)
{
    BYTE* new_data = static_cast<BYTE*>(LocalAlloc(LPTR, length));
    DWORD new_length = 0;
    BOOL result = Compress(hCompressor, data, length, new_data, &new_length, nullptr);
    if (result)
    {
        memcpy_s(data, length, new_data, new_length);
        length = new_length;
    }

    LocalFree(new_data);
    return result;
}

void CloseCompressor(HCOMPRESSOR hCompressor)
{
    if (hCompressor != nullptr)
    {
        CloseCompressor(hCompressor);
    }
}
